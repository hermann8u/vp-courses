(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{428:function(e,s,t){"use strict";t.r(s);var n=t(56),a=Object(n.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"listes-des-principales-commandes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#listes-des-principales-commandes"}},[e._v("#")]),e._v(" Listes des principales commandes")]),e._v(" "),t("p",[e._v("Voici une liste des principales commandes disponible dans Symfony à connaître. Elle sera complété au fûr et à mesure du cours.")]),e._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#global"}},[e._v("Global")])]),t("li",[t("a",{attrs:{href:"#cache"}},[e._v("Cache")])]),t("li",[t("a",{attrs:{href:"#debug"}},[e._v("Debug")])]),t("li",[t("a",{attrs:{href:"#maker"}},[e._v("Maker")])]),t("li",[t("a",{attrs:{href:"#doctrine"}},[e._v("Doctrine")])])])]),t("p"),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("Toutes ces commandes s'exécutent par défaut pour l'environnement défini par la variable d'environnement "),t("strong",[e._v("APP_ENV")]),e._v(". Vous pouvez utiliser l'option "),t("em",[e._v("--env")]),e._v(" pour l'exécuter pour un autre environnement (ex : "),t("em",[e._v("php bin/console cache:clear --env=prod")]),e._v(").")])]),e._v(" "),t("h2",{attrs:{id:"global"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#global"}},[e._v("#")]),e._v(" Global")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("php bin/console")]),e._v(" : Affiche la liste des complètes des commandes disponible dans l'application avec la version actuelle de Symfony. Utilisez la commande précédente avvec l'option "),t("em",[e._v("-V")]),e._v(" pour afficher seulement la version.")]),e._v(" "),t("li",[t("strong",[e._v("php bin/console list")]),e._v(" : Affiche la liste des commandes disponible dans l'application. Vous pouvez ajouter un argument pour avoir seulement la liste pour un namespace donné. Par exemple, la commande "),t("em",[e._v("php bin/console list debug")]),e._v(" affichera seulement les commandes de debug.")])]),e._v(" "),t("h2",{attrs:{id:"cache"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache"}},[e._v("#")]),e._v(" Cache")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("php bin/console cache:clear")]),e._v(" : Vide le cache pour l'environnement courant et le reconstruit partiellement.")])]),e._v(" "),t("h2",{attrs:{id:"debug"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#debug"}},[e._v("#")]),e._v(" Debug")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("php bin/console debug:router")]),e._v(" : Permet d'afficher toutes les routes de notre application avec leur nom, leur méthode HTTP et leur path")]),e._v(" "),t("li",[t("strong",[e._v("php bin/console debug:autowiring")]),e._v(" : Liste les classes et interfaces à utiliser pour l'autowiring.")]),e._v(" "),t("li",[t("strong",[e._v("php bin/console debug:container")]),e._v(" : Liste tous les services disponibles dans l'application.")]),e._v(" "),t("li",[t("strong",[e._v("php bin/console debug:event-dispatcher")]),e._v(" : Liste tous les events avec leurs listeners et subscribers associées.")])]),e._v(" "),t("h2",{attrs:{id:"maker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maker"}},[e._v("#")]),e._v(" Maker")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("php bin/console make:controller")]),e._v(" : Génère un contrôleur vide avec le nom donné")]),e._v(" "),t("li",[t("strong",[e._v("php bin/console make:entity")]),e._v(" : Génère ou modifie une Entity Doctrine, ses propriétés et son Repository")]),e._v(" "),t("li",[t("strong",[e._v("php bin/console make:form")]),e._v(" : Génère un formulaire en se basant (ou non) sur une entité Doctrine")])]),e._v(" "),t("h2",{attrs:{id:"doctrine"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#doctrine"}},[e._v("#")]),e._v(" Doctrine")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("php bin/console doctrine:database:create")]),e._v(" : Crée la base de données à partir des variables d'environnement définis")]),e._v(" "),t("li",[t("strong",[e._v("php bin/console doctrine:schema:update --dump-sql")]),e._v(" : Affiche toutes les requêtes SQL nécessaire pour que la base de données correspondent à la définition de nos entités.")]),e._v(" "),t("li",[t("strong",[e._v("php bin/console doctrine:schema:update --force")]),e._v(" : Execute les requêtes SQL pour mettre à jour notre base de données par rapport à la définition de nos entités.")])])])}),[],!1,null,null,null);s.default=a.exports}}]);